signature: Tensor
cppname: at::Tensor
hsname: Tensor
functions: []
constructors:
- new() -> Tensor
- new(Tensor x) -> Tensor
methods:
- dim() -> int64_t
- storage_offset() -> int64_t
- defined() -> bool
- reset() -> void
- operator=(Tensor x) -> Tensor
- is_same(Tensor other) -> bool
- use_count() -> size_t
- weak_use_count() -> size_t
- toString() -> std::string
- sizes() -> IntArrayRef
- strides() -> IntArrayRef
#- opt_names() -> optional<DimnameList>
#- names() -> DimnameList
- ndimension() -> int64_t
#- is_contiguous(at::MemoryFormat memory_format=at::MemoryFormat::Contiguous) -> bool
- is_contiguous() -> bool
- is_non_overlapping_and_dense() -> bool
- nbytes() -> size_t
- numel() -> int64_t
- itemsize() -> size_t
- element_size() -> int64_t
#- type() -> DeprecatedTypeProperties
#- key_set() -> DispatchKeySet
- scalar_type() -> ScalarType
- has_storage() -> bool
- storage() -> Storage
- is_alias_of(Tensor other) -> bool
- toType(ScalarType t) -> Tensor
- toBackend(Backend b) -> Tensor
- is_variable() -> bool
- layout() -> Layout
#- dtype() -> caffe2::TypeMeta
#- device() -> Device
- get_device() -> int64_t
- is_cuda() -> bool
- is_hip() -> bool
- is_sparse() -> bool
- is_mkldnn() -> bool
- is_quantized() -> bool
#- quantizer() -> QuantizerPtr
- has_names() -> bool
#- get_named_tensor_meta() -> NamedTensorMeta*
#- get_named_tensor_meta() -> NamedTensorMeta*
- options() -> TensorOptions
- data_ptr() -> void*
#- data_ptr() -> T*
#- data() -> T*
#- item() -> T
- item<int64_t>() -> int64_t
- item<float>() -> float
- item<double>() -> double
- print() -> void
#- accessor() -> TensorAccessor<T,N>
#- accessor() -> TensorAccessor<T,N>
#- generic_packed_accessor() -> GenericPackedTensorAccessor<T,N,PtrTraits,index_t>
#- generic_packed_accessor() -> GenericPackedTensorAccessor<T,N>
#- packed_accessor32() -> PackedTensorAccessor32<T,N,PtrTraits>
#- packed_accessor32() -> PackedTensorAccessor32<T,N,PtrTraits>
#- packed_accessor64() -> PackedTensorAccessor64<T,N,PtrTraits>
#- packed_accessor64() -> PackedTensorAccessor64<T,N,PtrTraits>
#- packed_accessor() -> GenericPackedTensorAccessor<T,N,PtrTraits,index_t>
#- packed_accessor() -> GenericPackedTensorAccessor<T,N,PtrTraits,index_t>
#- operator-() -> Tensor
- operator+=(Tensor  other) -> void
- operator+=(Scalar other) -> void
- operator-=(Tensor  other) -> void
- operator-=(Scalar other) -> void
- operator*=(Tensor  other) -> void
- operator*=(Scalar other) -> void
- operator/=(Tensor  other) -> void
- operator/=(Scalar other) -> void
- operator[](Scalar index) -> Tensor
- operator[](Tensor index) -> Tensor
- operator[](int64_t index) -> Tensor
# - index(ArrayRef<at::indexing::TensorIndex> indices) -> Tensor
# - index(std::initializer_list<at::indexing::TensorIndex> indices) -> Tensor
# - index_put_(ArrayRef<at::indexing::TensorIndex> indices, Tensor  rhs) -> Tensor
# - index_put_(ArrayRef<at::indexing::TensorIndex> indices, Scalar v) -> Tensor
# - index_put_(std::initializer_list<at::indexing::TensorIndex> indices, Tensor  rhs) -> Tensor
# - index_put_(std::initializer_list<at::indexing::TensorIndex> indices, Scalar v) -> Tensor
- cpu() -> Tensor
- cuda() -> Tensor
- hip() -> Tensor
- set_requires_grad(bool requires_grad) -> Tensor
- requires_grad() -> bool
- grad() -> Tensor
- backward(Tensor  gradient={}, bool keep_graph=false, bool create_graph=false) -> void
- set_data(Tensor  new_data) -> void
- data() -> Tensor
- is_leaf() -> bool
- output_nr() -> int64_t
- _version() -> int64_t
- requires_grad_(bool _requires_grad=true) -> Tensor
- retain_grad() -> void
- align_to(DimnameList names) -> Tensor
- align_to(DimnameList order, int64_t ellipsis_idx) -> Tensor
- align_as(Tensor  other) -> Tensor
- refine_names(DimnameList names) -> Tensor
- unflatten(Dimname dim, IntArrayRef sizes, DimnameList names) -> Tensor
- unflatten(int64_t dim, IntArrayRef sizes, DimnameList names) -> Tensor
- abs() -> Tensor
- abs_() -> Tensor
- angle() -> Tensor
- conj() -> Tensor
- acos() -> Tensor
- acos_() -> Tensor
- add(Tensor  other, Scalar alpha=1) -> Tensor
- add_(Tensor  other, Scalar alpha=1) -> Tensor
- add(Scalar other, Scalar alpha=1) -> Tensor
- add_(Scalar other, Scalar alpha=1) -> Tensor
- addmv(Tensor  mat, Tensor  vec, Scalar beta=1, Scalar alpha=1) -> Tensor
- addmv_(Tensor  mat, Tensor  vec, Scalar beta=1, Scalar alpha=1) -> Tensor
- addr(Tensor  vec1, Tensor  vec2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addr_(Tensor  vec1, Tensor  vec2, Scalar beta=1, Scalar alpha=1) -> Tensor
- all(int64_t dim, bool keepdim=false) -> Tensor
- all(Dimname dim, bool keepdim=false) -> Tensor
- allclose(Tensor  other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) -> bool
- any(int64_t dim, bool keepdim=false) -> Tensor
- any(Dimname dim, bool keepdim=false) -> Tensor
- asin() -> Tensor
- asin_() -> Tensor
- atan() -> Tensor
- atan_() -> Tensor
- baddbmm(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- baddbmm_(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- bernoulli(Generator * generator=nullptr) -> Tensor
- bernoulli_(Tensor  p, Generator * generator=nullptr) -> Tensor
- bernoulli_(double p=0.5, Generator * generator=nullptr) -> Tensor
- bernoulli(double p, Generator * generator=nullptr) -> Tensor
- bincount(Tensor  weights={}, int64_t minlength=0) -> Tensor
- bitwise_not() -> Tensor
- bitwise_not_() -> Tensor
- logical_not() -> Tensor
- logical_not_() -> Tensor
- logical_xor(Tensor  other) -> Tensor
- logical_xor_(Tensor  other) -> Tensor
- logical_and(Tensor  other) -> Tensor
- logical_and_(Tensor  other) -> Tensor
- logical_or(Tensor  other) -> Tensor
- logical_or_(Tensor  other) -> Tensor
- bmm(Tensor  mat2) -> Tensor
- ceil() -> Tensor
- ceil_() -> Tensor
- chunk(int64_t chunks, int64_t dim=0) -> TensorList
- clamp_max(Scalar max) -> Tensor
- clamp_max_(Scalar max) -> Tensor
- clamp_min(Scalar min) -> Tensor
- clamp_min_(Scalar min) -> Tensor
#- contiguous(MemoryFormat memory_format=MemoryFormat::Contiguous) -> Tensor
- contiguous() -> Tensor
- copy_(Tensor  src, bool non_blocking=false) -> Tensor
- cos() -> Tensor
- cos_() -> Tensor
- cosh() -> Tensor
- cosh_() -> Tensor
- cummax(int64_t dim) -> (Tensor,Tensor)
- cummax(Dimname dim) -> (Tensor,Tensor)
- cummin(int64_t dim) -> (Tensor,Tensor)
- cummin(Dimname dim) -> (Tensor,Tensor)
- det() -> Tensor
- diag_embed(int64_t offset=0, int64_t dim1=-2, int64_t dim2=-1) -> Tensor
- diagflat(int64_t offset=0) -> Tensor
- diagonal(int64_t offset=0, int64_t dim1=0, int64_t dim2=1) -> Tensor
- diagonal(Dimname outdim, Dimname dim1, Dimname dim2, int64_t offset=0) -> Tensor
- fill_diagonal_(Scalar fill_value, bool wrap=false) -> Tensor
- div(Tensor  other) -> Tensor
- div_(Tensor  other) -> Tensor
- div(Scalar other) -> Tensor
- div_(Scalar other) -> Tensor
- dot(Tensor  tensor) -> Tensor
- new_empty(IntArrayRef size, TensorOptions  options={}) -> Tensor
- new_full(IntArrayRef size, Scalar fill_value, TensorOptions  options={}) -> Tensor
- resize_(IntArrayRef size) -> Tensor
- new_zeros(IntArrayRef size, TensorOptions  options={}) -> Tensor
- erf() -> Tensor
- erf_() -> Tensor
- erfc() -> Tensor
- erfc_() -> Tensor
- exp() -> Tensor
- exp_() -> Tensor
- expm1() -> Tensor
- expm1_() -> Tensor
- expand(IntArrayRef size, bool implicit=false) -> Tensor
- expand_as(Tensor  other) -> Tensor
- flatten(int64_t start_dim=0, int64_t end_dim=-1) -> Tensor
- flatten(int64_t start_dim, int64_t end_dim, Dimname out_dim) -> Tensor
- flatten(Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor
- flatten(DimnameList dims, Dimname out_dim) -> Tensor
- fill_(Scalar value) -> Tensor
- fill_(Tensor  value) -> Tensor
- floor() -> Tensor
- floor_() -> Tensor
- floor_divide(Tensor  other) -> Tensor
- floor_divide_(Tensor  other) -> Tensor
- floor_divide(Scalar other) -> Tensor
- floor_divide_(Scalar other) -> Tensor
- frac() -> Tensor
- frac_() -> Tensor
- ger(Tensor  vec2) -> Tensor
- fft(int64_t signal_ndim, bool normalized=false) -> Tensor
- ifft(int64_t signal_ndim, bool normalized=false) -> Tensor
- rfft(int64_t signal_ndim, bool normalized=false, bool onesided=true) -> Tensor
- irfft(int64_t signal_ndim, bool normalized=false, bool onesided=true, IntArrayRef signal_sizes={}) -> Tensor
- index(TensorList indices) -> Tensor
- index_copy_(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_copy(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_copy_(Dimname dim, Tensor  index, Tensor  source) -> Tensor
- index_copy(Dimname dim, Tensor  index, Tensor  source) -> Tensor
- index_put_(TensorList indices, Tensor  values, bool accumulate=false) -> Tensor
- index_put(TensorList indices, Tensor  values, bool accumulate=false) -> Tensor
- inverse() -> Tensor
- isclose(Tensor  other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) -> Tensor
- is_distributed() -> bool
- is_floating_point() -> bool
- is_complex() -> bool
- is_nonzero() -> bool
- is_same_size(Tensor  other) -> bool
- is_signed() -> bool
- kthvalue(int64_t k, int64_t dim=-1, bool keepdim=false) -> (Tensor,Tensor)
- kthvalue(int64_t k, Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- log() -> Tensor
- log_() -> Tensor
- log10() -> Tensor
- log10_() -> Tensor
- log1p() -> Tensor
- log1p_() -> Tensor
- log2() -> Tensor
- log2_() -> Tensor
- logdet() -> Tensor
- logsumexp(IntArrayRef dim, bool keepdim=false) -> Tensor
- logsumexp(DimnameList dim, bool keepdim=false) -> Tensor
- matmul(Tensor  other) -> Tensor
- matrix_power(int64_t n) -> Tensor
- max(int64_t dim, bool keepdim=false) -> (Tensor,Tensor)
- max_values(IntArrayRef dim, bool keepdim=false) -> Tensor
- max(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- max_values(DimnameList dim, bool keepdim=false) -> Tensor
- median(int64_t dim, bool keepdim=false) -> (Tensor,Tensor)
- median(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- min(int64_t dim, bool keepdim=false) -> (Tensor,Tensor)
- min_values(IntArrayRef dim, bool keepdim=false) -> Tensor
- min(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- min_values(DimnameList dim, bool keepdim=false) -> Tensor
- mm(Tensor  mat2) -> Tensor
- mode(int64_t dim=-1, bool keepdim=false) -> (Tensor,Tensor)
- mode(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- mul(Tensor  other) -> Tensor
- mul_(Tensor  other) -> Tensor
- mul(Scalar other) -> Tensor
- mul_(Scalar other) -> Tensor
- mv(Tensor  vec) -> Tensor
- mvlgamma(int64_t p) -> Tensor
- mvlgamma_(int64_t p) -> Tensor
- narrow_copy(int64_t dim, int64_t start, int64_t length) -> Tensor
- narrow(int64_t dim, int64_t start, int64_t length) -> Tensor
- narrow(int64_t dim, Tensor  start, int64_t length) -> Tensor
- permute(IntArrayRef dims) -> Tensor
- numpy_T() -> Tensor
- is_pinned() -> bool
- pin_memory() -> Tensor
- pinverse(double rcond=1e-15) -> Tensor
- reciprocal() -> Tensor
- reciprocal_() -> Tensor
- neg() -> Tensor
- neg_() -> Tensor
- repeat(IntArrayRef repeats) -> Tensor
- reshape(IntArrayRef shape) -> Tensor
- reshape_as(Tensor  other) -> Tensor
- round() -> Tensor
- round_() -> Tensor
- relu() -> Tensor
- relu_() -> Tensor
- prelu(Tensor  weight) -> Tensor
- prelu_backward(Tensor  grad_output, Tensor  weight) -> (Tensor,Tensor)
- hardshrink(Scalar lambd=0.5) -> Tensor
- hardshrink_backward(Tensor  grad_out, Scalar lambd) -> Tensor
- rsqrt() -> Tensor
- rsqrt_() -> Tensor
- select(Dimname dim, int64_t index) -> Tensor
- select(int64_t dim, int64_t index) -> Tensor
- sigmoid() -> Tensor
- sigmoid_() -> Tensor
- sin() -> Tensor
- sin_() -> Tensor
- sinh() -> Tensor
- sinh_() -> Tensor
- detach() -> Tensor
- detach_() -> Tensor
- size(int64_t dim) -> int64_t
- size(Dimname dim) -> int64_t
- slice(int64_t dim=0, int64_t start=0, int64_t end=9223372036854775807, int64_t step=1) -> Tensor
- slogdet() -> (Tensor,Tensor)
- smm(Tensor  mat2) -> Tensor
- split(int64_t split_size, int64_t dim=0) -> TensorList
- split_with_sizes(IntArrayRef split_sizes, int64_t dim=0) -> TensorList
- squeeze() -> Tensor
- squeeze(int64_t dim) -> Tensor
- squeeze(Dimname dim) -> Tensor
- squeeze_() -> Tensor
- squeeze_(int64_t dim) -> Tensor
- squeeze_(Dimname dim) -> Tensor
- sspaddmm(Tensor  mat1, Tensor  mat2, Scalar beta=1, Scalar alpha=1) -> Tensor
- stride(int64_t dim) -> int64_t
- stride(Dimname dim) -> int64_t
- sum_to_size(IntArrayRef size) -> Tensor
- sqrt() -> Tensor
- sqrt_() -> Tensor
- square() -> Tensor
- square_() -> Tensor
- std(bool unbiased=true) -> Tensor
- std(IntArrayRef dim, bool unbiased=true, bool keepdim=false) -> Tensor
- std(DimnameList dim, bool unbiased=true, bool keepdim=false) -> Tensor
- t() -> Tensor
- t_() -> Tensor
- tan() -> Tensor
- tan_() -> Tensor
- tanh() -> Tensor
- tanh_() -> Tensor
- transpose(int64_t dim0, int64_t dim1) -> Tensor
- transpose(Dimname dim0, Dimname dim1) -> Tensor
- transpose_(int64_t dim0, int64_t dim1) -> Tensor
- flip(IntArrayRef dims) -> Tensor
- roll(IntArrayRef shifts, IntArrayRef dims={}) -> Tensor
- rot90(int64_t k=1, IntArrayRef dims={0,1}) -> Tensor
- true_divide(Tensor  other) -> Tensor
- true_divide_(Tensor  other) -> Tensor
- true_divide(Scalar other) -> Tensor
- true_divide_(Scalar other) -> Tensor
- trunc() -> Tensor
- trunc_() -> Tensor
- type_as(Tensor  other) -> Tensor
- unsqueeze(int64_t dim) -> Tensor
- unsqueeze_(int64_t dim) -> Tensor
- var(bool unbiased=true) -> Tensor
- var(IntArrayRef dim, bool unbiased=true, bool keepdim=false) -> Tensor
- var(DimnameList dim, bool unbiased=true, bool keepdim=false) -> Tensor
- view_as(Tensor  other) -> Tensor
- where(Tensor  condition, Tensor  other) -> Tensor
- norm(Scalar p=2) -> Tensor
- clone() -> Tensor
- resize_as_(Tensor  the_template) -> Tensor
- pow(Scalar exponent) -> Tensor
- zero_() -> Tensor
- sub(Tensor  other, Scalar alpha=1) -> Tensor
- sub_(Tensor  other, Scalar alpha=1) -> Tensor
- sub(Scalar other, Scalar alpha=1) -> Tensor
- sub_(Scalar other, Scalar alpha=1) -> Tensor
- addmm(Tensor  mat1, Tensor  mat2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addmm_(Tensor  mat1, Tensor  mat2, Scalar beta=1, Scalar alpha=1) -> Tensor
- sparse_resize_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) -> Tensor
- sparse_resize_and_clear_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) -> Tensor
- sparse_mask(Tensor  mask) -> Tensor
- to_dense() -> Tensor
- sparse_dim() -> int64_t
- _dimI() -> int64_t
- dense_dim() -> int64_t
- _dimV() -> int64_t
- _nnz() -> int64_t
- coalesce() -> Tensor
- is_coalesced() -> bool
- _indices() -> Tensor
- _values() -> Tensor
- _coalesced_(bool coalesced) -> Tensor
- indices() -> Tensor
- values() -> Tensor
- unbind(int64_t dim=0) -> TensorList
- unbind(Dimname dim) -> TensorList
- to_sparse(int64_t sparse_dim) -> Tensor
- to_sparse() -> Tensor
- to_mkldnn() -> Tensor
- dequantize() -> Tensor
- q_scale() -> double
- q_zero_point() -> int64_t
- q_per_channel_scales() -> Tensor
- q_per_channel_zero_points() -> Tensor
- q_per_channel_axis() -> int64_t
- int_repr() -> Tensor
- qscheme() -> QScheme
- to(TensorOptions  options, bool non_blocking=false, bool copy=false) -> Tensor
- to(Device device, ScalarType dtype, bool non_blocking=false, bool copy=false) -> Tensor
- to(ScalarType dtype, bool non_blocking=false, bool copy=false) -> Tensor
- to(Tensor  other, bool non_blocking=false, bool copy=false) -> Tensor
#- item() -> Scalar
- set_(Storage source) -> Tensor
- set_(Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride={}) -> Tensor
- set_(Tensor  source) -> Tensor
- set_() -> Tensor
#- set_quantizer_(ConstQuantizerPtr quantizer) -> Tensor
- is_set_to(Tensor  tensor) -> bool
- masked_fill_(Tensor  mask, Scalar value) -> Tensor
- masked_fill(Tensor  mask, Scalar value) -> Tensor
- masked_fill_(Tensor  mask, Tensor  value) -> Tensor
- masked_fill(Tensor  mask, Tensor  value) -> Tensor
- masked_scatter_(Tensor  mask, Tensor  source) -> Tensor
- masked_scatter(Tensor  mask, Tensor  source) -> Tensor
- view(IntArrayRef size) -> Tensor
- put_(Tensor  index, Tensor  source, bool accumulate=false) -> Tensor
- index_add_(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_add(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_add(Dimname dim, Tensor  index, Tensor  source) -> Tensor
- index_fill_(int64_t dim, Tensor  index, Scalar value) -> Tensor
- index_fill(int64_t dim, Tensor  index, Scalar value) -> Tensor
- index_fill_(int64_t dim, Tensor  index, Tensor  value) -> Tensor
- index_fill(int64_t dim, Tensor  index, Tensor  value) -> Tensor
- index_fill_(Dimname dim, Tensor  index, Scalar value) -> Tensor
- index_fill_(Dimname dim, Tensor  index, Tensor  value) -> Tensor
- index_fill(Dimname dim, Tensor  index, Scalar value) -> Tensor
- index_fill(Dimname dim, Tensor  index, Tensor  value) -> Tensor
- scatter_(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter_(int64_t dim, Tensor  index, Scalar value) -> Tensor
- scatter(int64_t dim, Tensor  index, Scalar value) -> Tensor
- scatter(Dimname dim, Tensor  index, Tensor  src) -> Tensor
- scatter(Dimname dim, Tensor  index, Scalar value) -> Tensor
- scatter_add_(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter_add(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter_add(Dimname dim, Tensor  index, Tensor  src) -> Tensor
- lt_(Scalar other) -> Tensor
- lt_(Tensor  other) -> Tensor
- gt_(Scalar other) -> Tensor
- gt_(Tensor  other) -> Tensor
- le_(Scalar other) -> Tensor
- le_(Tensor  other) -> Tensor
- ge_(Scalar other) -> Tensor
- ge_(Tensor  other) -> Tensor
- eq_(Scalar other) -> Tensor
- eq_(Tensor  other) -> Tensor
- ne_(Scalar other) -> Tensor
- ne_(Tensor  other) -> Tensor
- bitwise_and(Scalar other) -> Tensor
- bitwise_and(Tensor  other) -> Tensor
- bitwise_and_(Scalar other) -> Tensor
- bitwise_and_(Tensor  other) -> Tensor
- __and__(Scalar other) -> Tensor
- __and__(Tensor  other) -> Tensor
- __iand__(Scalar other) -> Tensor
- __iand__(Tensor  other) -> Tensor
- bitwise_or(Scalar other) -> Tensor
- bitwise_or(Tensor  other) -> Tensor
- bitwise_or_(Scalar other) -> Tensor
- bitwise_or_(Tensor  other) -> Tensor
- __or__(Scalar other) -> Tensor
- __or__(Tensor  other) -> Tensor
- __ior__(Scalar other) -> Tensor
- __ior__(Tensor  other) -> Tensor
- bitwise_xor(Scalar other) -> Tensor
- bitwise_xor(Tensor  other) -> Tensor
- bitwise_xor_(Scalar other) -> Tensor
- bitwise_xor_(Tensor  other) -> Tensor
- __xor__(Scalar other) -> Tensor
- __xor__(Tensor  other) -> Tensor
- __ixor__(Scalar other) -> Tensor
- __ixor__(Tensor  other) -> Tensor
- __lshift__(Scalar other) -> Tensor
- __lshift__(Tensor  other) -> Tensor
- __ilshift__(Scalar other) -> Tensor
- __ilshift__(Tensor  other) -> Tensor
- __rshift__(Scalar other) -> Tensor
- __rshift__(Tensor  other) -> Tensor
- __irshift__(Scalar other) -> Tensor
- __irshift__(Tensor  other) -> Tensor
- lgamma_() -> Tensor
- atan2_(Tensor  other) -> Tensor
- tril_(int64_t diagonal=0) -> Tensor
- triu_(int64_t diagonal=0) -> Tensor
- digamma_() -> Tensor
- polygamma_(int64_t n) -> Tensor
- renorm_(Scalar p, int64_t dim, Scalar maxnorm) -> Tensor
- pow_(Scalar exponent) -> Tensor
- pow_(Tensor  exponent) -> Tensor
- lerp_(Tensor  end, Scalar weight) -> Tensor
- lerp_(Tensor  end, Tensor  weight) -> Tensor
- fmod_(Scalar other) -> Tensor
- fmod_(Tensor  other) -> Tensor
- remainder_(Scalar other) -> Tensor
- remainder_(Tensor  other) -> Tensor
- addbmm_(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addbmm(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addcdiv_(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- random_(int64_t from, int64_t to, Generator * generator=nullptr) -> Tensor
- random_(int64_t to, Generator * generator=nullptr) -> Tensor
- random_(Generator * generator=nullptr) -> Tensor
- uniform_(double from=0, double to=1, Generator * generator=nullptr) -> Tensor
- normal_(double mean=0, double std=1, Generator * generator=nullptr) -> Tensor
- cauchy_(double median=0, double sigma=1, Generator * generator=nullptr) -> Tensor
- log_normal_(double mean=1, double std=2, Generator * generator=nullptr) -> Tensor
- exponential_(double lambd=1, Generator * generator=nullptr) -> Tensor
- geometric_(double p, Generator * generator=nullptr) -> Tensor
- diag(int64_t diagonal=0) -> Tensor
- triu(int64_t diagonal=0) -> Tensor
- tril(int64_t diagonal=0) -> Tensor
- trace() -> Tensor
- ne(Scalar other) -> Tensor
- ne(Tensor  other) -> Tensor
- eq(Scalar other) -> Tensor
- eq(Tensor  other) -> Tensor
- ge(Scalar other) -> Tensor
- ge(Tensor  other) -> Tensor
- le(Scalar other) -> Tensor
- le(Tensor  other) -> Tensor
- gt(Scalar other) -> Tensor
- gt(Tensor  other) -> Tensor
- lt(Scalar other) -> Tensor
- lt(Tensor  other) -> Tensor
- take(Tensor  index) -> Tensor
- index_select(int64_t dim, Tensor  index) -> Tensor
- index_select(Dimname dim, Tensor  index) -> Tensor
- masked_select(Tensor  mask) -> Tensor
- nonzero() -> Tensor
- nonzero_numpy() -> TensorList
- gather(int64_t dim, Tensor  index, bool sparse_grad=false) -> Tensor
- gather(Dimname dim, Tensor  index, bool sparse_grad=false) -> Tensor
- addcmul(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- addcmul_(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- addcdiv(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- lstsq(Tensor  A) -> (Tensor,Tensor)
- triangular_solve(Tensor  A, bool upper=true, bool transpose=false, bool unitriangular=false) -> (Tensor,Tensor)
- symeig(bool eigenvectors=false, bool upper=true) -> (Tensor,Tensor)
- eig(bool eigenvectors=false) -> (Tensor,Tensor)
- svd(bool some=true, bool compute_uv=true) -> (Tensor,Tensor,Tensor)
- cholesky(bool upper=false) -> Tensor
- cholesky_solve(Tensor  input2, bool upper=false) -> Tensor
- solve(Tensor  A) -> (Tensor,Tensor)
- cholesky_inverse(bool upper=false) -> Tensor
- qr(bool some=true) -> (Tensor,Tensor)
- geqrf() -> (Tensor,Tensor)
- orgqr(Tensor  input2) -> Tensor
- ormqr(Tensor  input2, Tensor  input3, bool left=true, bool transpose=false) -> Tensor
- lu_solve(Tensor  LU_data, Tensor  LU_pivots) -> Tensor
- multinomial(int64_t num_samples, bool replacement=false, Generator * generator=nullptr) -> Tensor
- lgamma() -> Tensor
- digamma() -> Tensor
- polygamma(int64_t n) -> Tensor
- erfinv() -> Tensor
- erfinv_() -> Tensor
- sign() -> Tensor
- sign_() -> Tensor
- dist(Tensor  other, Scalar p=2) -> Tensor
- atan2(Tensor  other) -> Tensor
- lerp(Tensor  end, Scalar weight) -> Tensor
- lerp(Tensor  end, Tensor  weight) -> Tensor
- histc(int64_t bins=100, Scalar min=0, Scalar max=0) -> Tensor
- fmod(Scalar other) -> Tensor
- fmod(Tensor  other) -> Tensor
- remainder(Scalar other) -> Tensor
- remainder(Tensor  other) -> Tensor
- min(Tensor  other) -> Tensor
- min() -> Tensor
- max(Tensor  other) -> Tensor
- max() -> Tensor
- median() -> Tensor
- sort(int64_t dim=-1, bool descending=false) -> (Tensor,Tensor)
- sort(Dimname dim, bool descending=false) -> (Tensor,Tensor)
- argsort(int64_t dim=-1, bool descending=false) -> Tensor
- argsort(Dimname dim, bool descending=false) -> Tensor
- topk(int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true) -> (Tensor,Tensor)
- all() -> Tensor
- any() -> Tensor
- renorm(Scalar p, int64_t dim, Scalar maxnorm) -> Tensor
- unfold(int64_t dimension, int64_t size, int64_t step) -> Tensor
- equal(Tensor  other) -> bool
- pow(Tensor  exponent) -> Tensor
- alias() -> Tensor
