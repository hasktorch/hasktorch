
-- generated by using spec/Declarations.yaml

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings #-}

module LibTorch.ATen.Type where

import qualified Language.C.Inline.Cpp as C
import qualified Language.C.Inline.Cpp.Exceptions as C
import qualified Language.C.Inline.Context as C
import qualified Language.C.Types as C
import qualified Data.Map as Map

import Foreign.C.String
import Foreign.C.Types
import Foreign

type ScalarType = Int8
type DeviceType = Int16
type Backend = CInt
type Layout = Int8
type MemoryFormat = Int8
type QScheme = Int8

-- std::vector<a>
data StdVector a

-- std::array<a>
data StdArray a

-- std::tuple<a>
data StdTuple a

-- at::Tensor
data Tensor

-- std::vector<at::Tensor>
type TensorList = StdVector Tensor

data Scalar
data TensorOptions

data IntArrayRef
-- std::vector<int64>
type IntArray = StdVector Int64

data Storage

data StdString
data Generator
data Device
data Context
data ConstQuantizerPtr

data Dimname
type DimnameList = StdVector Dimname

data Symbol

typeTable = Map.fromList [
        (C.TypeName "std::array", [t|StdArray|])
      , (C.TypeName "std::vector", [t|StdVector|])
      , (C.TypeName "std::tuple", [t|StdTuple|])
      , (C.TypeName "at::Scalar", [t|Scalar|])
      , (C.TypeName "at::Tensor", [t|Tensor|])
      , (C.TypeName "at::TensorOptions", [t|TensorOptions|])
      , (C.TypeName "at::IntArrayRef", [t|IntArrayRef|])
      , (C.TypeName "at::ScalarType", [t|ScalarType|])
      , (C.TypeName "at::DeviceType", [t|DeviceType|])
      , (C.TypeName "at::Storage", [t|Storage|])
      , (C.TypeName "at::Device", [t|Device|])
      , (C.TypeName "at::Generator", [t|Generator|])
      , (C.TypeName "std::string", [t|StdString|])
      , (C.TypeName "at::Backend", [t|Backend|])
      , (C.TypeName "at::Layout", [t|Layout|])
      , (C.TypeName "at::MemoryFormat", [t|MemoryFormat|])
      , (C.TypeName "at::Context", [t|Context|])
      , (C.TypeName "at::ConstQuantizerPtr", [t|ConstQuantizerPtr|])
      , (C.TypeName "at::QScheme", [t|QScheme|])
      , (C.TypeName "at::Dimname", [t|Dimname|])
      , (C.TypeName "at::Symbol", [t|Symbol|])
    ]
